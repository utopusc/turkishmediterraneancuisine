/*!
 * Copyright 2019 yangjunbao <yangjunbao@shimo.im>. All rights reserved.
 * @since 2019-10-10 12:08:58
 */
import { __extends, __values } from "tslib";
import isStream from 'is-stream';
import { Readable } from 'stream';
var AsyncReadableStream = /** @class */ (function (_super) {
    __extends(AsyncReadableStream, _super);
    function AsyncReadableStream(options) {
        if (options === void 0) { options = {}; }
        var _this = _super.call(this, options) || this;
        _this.chunks = [];
        _this.current = void 0;
        _this.nextSize = void 0;
        _this.isStoped = false;
        _this.handleError = function (e) {
            _this.destroy(e);
        };
        _this.handleData = function (chunk) {
            _this.nextSize = void 0;
            _this.push(chunk);
        };
        _this.handleEnd = function () {
            _this.removeHandlers(_this.current);
            var nextSize = _this.nextSize;
            _this.current = void 0;
            _this.nextSize = void 0;
            if (nextSize !== void 0) {
                _this._read(nextSize);
            }
        };
        return _this;
    }
    AsyncReadableStream.prototype.pushChunk = function (chunk) {
        var e_1, _a;
        if (this.isStoped) {
            return;
        }
        if (Array.isArray(chunk)) {
            try {
                for (var chunk_1 = __values(chunk), chunk_1_1 = chunk_1.next(); !chunk_1_1.done; chunk_1_1 = chunk_1.next()) {
                    var item = chunk_1_1.value;
                    this.pushChunk(item);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (chunk_1_1 && !chunk_1_1.done && (_a = chunk_1.return)) _a.call(chunk_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (chunk) {
            this.chunks.push(chunk);
            if (!this.current && this.nextSize !== void 0) {
                this._read(this.nextSize);
            }
        }
    };
    AsyncReadableStream.prototype.end = function () {
        this.isStoped = true;
    };
    AsyncReadableStream.prototype.removeHandlers = function (chunk) {
        if (isStream.readable(chunk)) {
            chunk.removeListener('data', this.handleData);
            chunk.removeListener('error', this.handleError);
            chunk.removeListener('end', this.handleEnd);
        }
    };
    AsyncReadableStream.prototype._read = function (size) {
        var _this = this;
        if (this.current) {
            this.nextSize = size || 0;
            return;
        }
        if (this.chunks.length === 0) {
            if (this.isStoped) {
                this.push(null);
            }
            else {
                this.nextSize = size;
            }
            return;
        }
        var chunk = this.chunks.shift();
        if (isStream.readable(chunk)) {
            this.current = chunk;
            chunk.on('error', this.handleError);
            chunk.on('data', this.handleData);
            chunk.on('end', this.handleEnd);
        }
        else if (chunk instanceof Promise) {
            chunk.then(function (data) { return _this.push(data || ''); }, function (reason) { return _this.destroy(reason); });
        }
        else {
            this.push(chunk || '');
        }
    };
    AsyncReadableStream.prototype._destroy = function (error, callback) {
        this.removeHandlers(this.current);
        this.current = void 0;
        this.nextSize = void 0;
        callback(error);
    };
    return AsyncReadableStream;
}(Readable));
export { AsyncReadableStream };
//# sourceMappingURL=AsyncReadableStream.js.map