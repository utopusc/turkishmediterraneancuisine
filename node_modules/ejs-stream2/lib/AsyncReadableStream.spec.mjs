/*!
 * Copyright 2019 yangjunbao <yangjunbao@shimo.im>. All rights reserved.
 * @since 2019-10-10 12:25:48
 */
import { __awaiter, __generator } from "tslib";
import { AsyncReadableStream } from './AsyncReadableStream';
import { createReadable, resolveReadable, sleep } from './utils';
describe('AsyncReadableStream', function () {
    it('should process chunks correctly', function () { return __awaiter(void 0, void 0, void 0, function () {
        var asyncReadable, chunks;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    asyncReadable = new AsyncReadableStream();
                    asyncReadable.pushChunk('string'); // string
                    asyncReadable.pushChunk(Buffer.from('buffer')); // buffer
                    asyncReadable.pushChunk(createReadable(2)); // readable stream
                    asyncReadable.pushChunk(sleep(1).then(function () { return 'promise'; })); // promise
                    asyncReadable.pushChunk([
                        'array-string',
                        sleep(1).then(function () { return 'array-promise'; }),
                        createReadable(2, 'array-readable-'),
                    ]);
                    asyncReadable.pushChunk(undefined);
                    asyncReadable.pushChunk('between-nullable');
                    asyncReadable.pushChunk(null);
                    asyncReadable.pushChunk([null, undefined, 'with-nullable']);
                    asyncReadable.pushChunk('final-string');
                    asyncReadable.end();
                    return [4 /*yield*/, resolveReadable(asyncReadable)];
                case 1:
                    chunks = _a.sent();
                    expect(chunks).toEqual([
                        'string',
                        'buffer',
                        'readable-2',
                        'readable-1',
                        'promise',
                        'array-string',
                        'array-promise',
                        'array-readable-2',
                        'array-readable-1',
                        'between-nullable',
                        'with-nullable',
                        'final-string',
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=AsyncReadableStream.spec.js.map