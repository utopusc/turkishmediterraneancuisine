/*!
 * Copyright 2019 acrazing <joking.young@gmail.com>. All rights reserved.
 * @since 2019-10-12 13:50:36
 */
import { __awaiter, __generator } from "tslib";
import { render } from './Template';
import { createReadable, resolveReadable, sleep } from './utils';
describe('Template', function () {
    it('should render as expected', function () { return __awaiter(void 0, void 0, void 0, function () {
        var readable, chunks;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    readable = render("\n<!DOCTYPE html>\n<html>\n<% for(let i = 0; i < 3; i++) { %><%- 'control-flow-for-' + i %><% } %>\n<% if(1) { // line comment %><%- 'after line comment' %><% } %>\n<% if(1) { /* block comment */ %><%- 'after block comment' %><% } %>\n<%= '<escaped html></escaped>' %>\n<%- '<raw>html</raw>' %>\n<%# this is comment block %>\nraw <%% %%>\n    <% if(1) %><%- 'with leading whitespace' %>\n    <%_ if(1) %><%- 'without leading whitespace' %>\n<%- 'trim new line' -%>\nshould without \\n\n<%- 'with trailing whitespace' %>    \n<%- 'without trailing whitespace' _%>    \n<%- string %>\n<%- promise %>\n<%- readable %>\n<%- buffer %>\n<%- array %>\n<%- end %>\n<%= void 0 -%>\n</html>\n      ".trim(), {
                        string: 'input-string',
                        promise: sleep(1).then(function () { return 'input-promise'; }),
                        readable: createReadable(2, 'input-readable-'),
                        buffer: Buffer.from('input-buffer'),
                        array: [
                            'array-string',
                            sleep(1).then(function () { return 'array-promise'; }),
                            createReadable(2, 'array-readable-'),
                            Buffer.from('array-buffer'),
                        ],
                        end: 'input-end',
                    });
                    return [4 /*yield*/, resolveReadable(readable)];
                case 1:
                    chunks = _a.sent();
                    expect(chunks).toEqual([
                        '<!DOCTYPE html>\n<html>\n',
                        'control-flow-for-0',
                        'control-flow-for-1',
                        'control-flow-for-2',
                        '\n',
                        'after line comment',
                        '\n',
                        'after block comment',
                        '\n',
                        '&lt;escaped html&gt;&lt;/escaped&gt;',
                        '\n',
                        '<raw>html</raw>',
                        '\n',
                        '\nraw ',
                        '<%',
                        ' ',
                        '%>',
                        '\n    ',
                        'with leading whitespace',
                        '\n',
                        'without leading whitespace',
                        '\n',
                        'trim new line',
                        'should without \\n\n',
                        'with trailing whitespace',
                        '    \n',
                        'without trailing whitespace',
                        'input-string',
                        '\n',
                        'input-promise',
                        '\n',
                        'input-readable-2',
                        'input-readable-1',
                        '\n',
                        'input-buffer',
                        '\n',
                        'array-string',
                        'array-promise',
                        'array-readable-2',
                        'array-readable-1',
                        'array-buffer',
                        '\n',
                        'input-end',
                        '\n',
                        '</html>',
                    ]);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=Template.spec.js.map